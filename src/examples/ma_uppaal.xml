<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>clock c;broadcast chan none_conn_position;broadcast chan none_conn_velocity;broadcast chan none_conn_acc;broadcast chan none_conn_req;broadcast chan none_conn_ma;broadcast chan none_conn_ea;const int PERIOD=2;const int MAsize=3;const int SR=3;const int b=1;const int start=0;const int SB_Rate=-8;const int EB_Rate=-10;const double PI = 3.1415926;
double normal_random()
{
double u = random(1);
double v = random(1);
double x = sqrt((-2) * ln(u)) * cos(2 * PI * v);
if(x&lt;0){return x*-1;}else{ return x;}}
//train variable
double v = 0.0;
double s = 0.0;
double a = 0.0;

		//IMA
		int i,eoa;

		typedef struct
		{
		int ModeTypes;
		int v1;
		int v2;
		int e;
		}Segment;
		int iSeg,nSeg;

		typedef struct
		{
		Segment seg[MAsize];
		}MovementAuthority;

		MovementAuthority iMA;
		double
		generateGaussianNoise(double mu, double sigma){
		double u = random(1);
		double v = random(1);
		double x = sqrt((-2) * ln(u)) * cos(2 * PI * v);
		return x*sigma + mu;
		}
	</declaration>
	<template>
		<name>Train</name>
		<declaration>
clock Train_clock;


		double t_random_delay;

		//if train' v equal to zero
		double v_temp;
		double time;

		void updateTrain(){
		//normal_random()/5 
		a=a-normal_random()/5;
		v_temp = v + a * PERIOD;
		if(v_temp &lt;=0){
		v=0;
		time =v / a;
		s =s + v*time + a * time *time /2;
		Train_clock=0;
		return ;
		}
		v = v + a *PERIOD;
		s =s + v*PERIOD + a * PERIOD *PERIOD /2;
		Train_clock=0;
		}

		void initilize(){
		Train_clock=0;a=2;
		updateTrain();
		}
	</declaration>
		<location id="id0" x="221" y="221">
			<name x="213" y="187">nond_train</name>
			<label kind="invariant" x="230" y="196">Train_clock&lt;=t_random_delay</label>
		</location>
		<location id="id1" x="51" y="60">
			<name x="43" y="26">Train_ts</name>
			<committed/>
		</location>
		<location id="id2" x="230" y="60">
			<name x="221" y="26">pController_ps</name>
		</location>
		<location id="id3" x="417" y="60">
			<name x="408" y="26">Train_tv</name>
		</location>
		<location id="id4" x="51" y="221">
			<name x="43" y="187">pController_pv</name>
		</location>
		<location id="id5" x="604" y="60">
			<name x="595" y="26">pController_pa</name>
		</location>
		<location id="id6" x="417" y="221">
			<name x="408" y="187">Train_ta</name>
			<label kind="invariant" x="391" y="196">Train_clock&lt;=2</label>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="51" y="111">Train_clock&gt;=t_random_delay</label>
			<label kind="synchronisation" x="51" y="111">none_conn_velocity!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id0"/>
			<label kind="guard" x="119" y="196">Train_clock&gt;=2</label>
			<label kind="assignment" x="128" y="196">Train_clock=0,t_random_delay=normal_random()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="170" y="26">none_conn_position!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="306" y="153">none_conn_acc?</label>
			<label kind="assignment" x="298" y="153">updateTrain()</label>
		</transition>
	</template>
	<template>
		<name>RBC</name>
		<declaration>
clock RBC_clock;


		double random_delay;
		// Place local declarations here.
		void sendMovementAuthority(){
		int j=0;
		for(j=0;j &lt;MAsize ; j ++){
      iMA.seg[j].v1= (MAsize-j)*5+10;
        iMA.seg[j].v2= (MAsize-j)*5;
        iMA.seg[j].e= (j+1)*13;}
}
void sendEOA(){
    eoa=30 + i*30;
}
void connectDelay(){
    RBC_clock=0;
    random_delay=normal_random()*2;
}	</declaration>
		<location id="id7" x="366" y="60">
			<name x="357" y="26">nond_RBC</name>
			<label kind="invariant" x="264" y="145">RBC_clock&lt;=random_delay</label>
		</location>
		<location id="id8" x="-17" y="213">
			<name x="-59" y="179">pController_pr</name>
		</location>
		<location id="id9" x="553" y="60">
			<name x="544" y="26">RBC_r</name>
		</location>
		<location id="id10" x="-17" y="60">
			<name x="-34" y="34">RBC_m</name>
		</location>
		<location id="id11" x="162" y="213">
			<name x="111" y="170">pController_pm</name>
		</location>
		<location id="id12" x="162" y="60">
			<name x="153" y="26">RBC_ea</name>
			<committed/>
		</location>
		<location id="id13" x="366" y="213">
			<name x="357" y="179">pController_pea</name>
			<committed/>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id7"/>
			<target ref="id12"/>
			<label kind="guard" x="196" y="26">RBC_clock&gt;=random_delay</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="153" y="102">none_conn_req?</label>
			<label kind="assignment" x="153" y="102">connectDelay()</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="213" y="204">none_conn_ea!</label>
			<label kind="assignment" x="213" y="204">sendEOA()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="298" y="136">none_conn_ma!</label>
			<label kind="assignment" x="289" y="145">sendMovementAuthority()</label>
		</transition>
	</template>
	<template>
		<name>pController</name>
		<declaration>
clock pController_clock;


		double c_random_delay;

		//SBI
		bool B1(){
		return (s-start)  &lt;=0 || v  &lt; iMA.seg[iSeg].v2;
		}

		bool notB1(){
		return (s-start) &gt;0 &amp;&amp; v &gt;= iMA.seg[iSeg].v2;
		}

		bool B2(){
		return (s-start)  &lt;=0 || (v*2*2 +
		2*b*s) &lt;iMA.seg[nSeg].v2+(2*b*iMA.seg[iSeg].e);
		}

		bool notB2(){
		return (s-start) &gt;0 &amp;&amp; (v*2*2 +
		2*b*s)&gt;=iMA.seg[nSeg].v2+(2*b*iMA.seg[iSeg].e);
		}

		//EBI
		bool B3(){
		return v  &lt; iMA.seg[iSeg].v1;
		}

		bool notB3(){
		return v &gt; iMA.seg[iSeg].v1;
		}


		bool B4(){
		return (v*2*2 + 2*b*s) &lt;iMA.seg[nSeg].v1+(2*b*iMA.seg[iSeg].e);
		}

		bool notB4(){
		return (v*2*2 + 2*b*s)&gt;=iMA.seg[nSeg].v1+(2*b*iMA.seg[iSeg].e);
		}

		void updateSegment(){
		int j = 0;
		for(j=0;j &lt;MAsize;j++){
		if(iMA.seg[j].e-s &lt;0){
		i=j;
		iSeg = j;
		if(j==MAsize-1){
		nSeg = j;
		}else{
		nSeg = j+1;
		}
		j= MAsize;
		}
		}
		}
	</declaration>
		<location id="id14" x="527" y="391">
		</location>
		<location id="id15" x="179" y="391">
		</location>
		<location id="id16" x="366" y="238">
		</location>
		<location id="id17" x="179" y="85">
			<name x="170" y="51">nond_pController1</name>
			<label kind="invariant" x="119" y="145">pController_clock&lt;=c_random_delay</label>
		</location>
		<location id="id18" x="25" y="85">
			<name x="-60" y="60">pController_READY</name>
			<committed/>
		</location>
		<location id="id19" x="179" y="238">
			<name x="170" y="204">pController_GMA</name>
		</location>
		<location id="id20" x="366" y="85">
			<name x="357" y="51">pController_CMA</name>
			<committed/>
		</location>
		<location id="id21" x="26" y="238">
			<name x="17" y="204">pController_RETRY</name>
		</location>
		<location id="id22" x="26" y="391">
			<name x="17" y="357">pController_MFR</name>
		</location>
		<location id="id23" x="527" y="238">
			<name x="519" y="204">pController_CMF</name>
			<committed/>
		</location>
		<location id="id24" x="697" y="238">
			<name x="689" y="204">pController_SBI</name>
			<committed/>
		</location>
		<location id="id25" x="366" y="391">
			<name x="357" y="357">pController_CSB</name>
		</location>
		<location id="id26" x="697" y="85">
			<name x="689" y="51">pController_EBI</name>
			<committed/>
		</location>
		<location id="id27" x="527" y="85">
			<name x="519" y="51">pController_STOP</name>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id14"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="9" y="400">none_conn_velocity?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="43" y="400">none_conn_velocity?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="638" y="136">none_conn_position?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="544" y="221">none_conn_velocity?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="323" y="145">none_conn_ea?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="561" y="77">none_conn_ma?</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="119" y="145">pController_clock&gt;=c_random_delay</label>
			<label kind="synchronisation" x="179" y="145">none_conn_req!</label>
			<label kind="assignment" x="204" y="145">i=0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="assignment" x="17" y="60">c_random_delay=normal_random()</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="guard" x="315" y="145">iMA.seg[0].v1!=0</label>
			<label kind="assignment" x="162" y="340">pController_clock=0,updateSegment()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="391" y="315">(notB1() || notB2()) &amp;&amp; B3() &amp;&amp; B4()</label>
			<label kind="synchronisation" x="204" y="383">none_conn_acc!</label>
			<label kind="assignment" x="187" y="383">a=SB_Rate,pController_clock=0,updateSegment()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<nail x="289" y="315"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="guard" x="451" y="315">B1() &amp;&amp; B2()</label>
			<label kind="synchronisation" x="459" y="315">none_conn_acc!</label>
			<label kind="assignment" x="136" y="340">updateSegment(),pController_clock=0,a=1</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id24"/>
			<label kind="guard" x="587" y="315">notB1() || notB2()</label>
			<label kind="synchronisation" x="26" y="400">none_conn_acc!</label>
			<label kind="assignment" x="204" y="383">pController_clock=0,updateSegment()</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="213" y="221">iMA.seg[0].v1==0</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id19"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="guard" x="663" y="136">notB3() || notB4()</label>
			<label kind="synchronisation" x="646" y="136">none_conn_acc!</label>
			<label kind="assignment" x="111" y="340">pController_clock=0,updateSegment(),a=EB_Rate</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="680" y="136">v&lt;=0</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="guard" x="587" y="315">notB3() || notB4()</label>
			<label kind="synchronisation" x="587" y="315">none_conn_acc!</label>
			<label kind="assignment" x="128" y="340">pController_clock=0,updateSegment(),a=EB_Rate</label>
		</transition>
	</template>
	<system> system Train,RBC,pController;</system>
	<queries>
	</queries>
</nta>
